name: Harbor Charts Sync

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *" # runs daily at 2 AM

jobs:
  sync-harbor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.15.0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest ORAS version
        id: oras_version
        run: |
          ver=$(curl -s https://api.github.com/repos/oras-project/oras/releases/latest | jq -r .tag_name)
          echo "version=${ver#v}" >> $GITHUB_OUTPUT

      - name: Install ORAS CLI
        uses: oras-project/setup-oras@v1
        with:
          version: ${{ steps.oras_version.outputs.version }}

      # Login to Harbor with robot (single-quote around username prevents shell $ expansion)
      - name: Login to Harbor (oras + helm)
        run: |
          echo "${{ secrets.HARBOR_ROBOT_TOKEN }}" | oras login harbor.portainercloud.io \
            -u '${{ secrets.HARBOR_ROBOT_USER }}' --password-stdin
          # helm needs its own registry login so helm chart push works
          echo "${{ secrets.HARBOR_ROBOT_TOKEN }}" | helm registry login harbor.portainercloud.io \
            -u '${{ secrets.HARBOR_ROBOT_USER }}' --password-stdin

      - name: Sync Apache charts (Bitnami -> Harbor, keep latest 15)
        run: |
          set -euo pipefail

          BITNAMI_REPO="https://charts.bitnami.com/bitnami"
          # use the same repo variable shape you've used previously
          HARBOR_REPO="harbor.portainercloud.io/helm/apache"
          KEEP=15

          mkdir -p packaged

          # ensure bitnami repo is available
          helm repo add bitnami "$BITNAMI_REPO" >/dev/null 2>&1 || true
          helm repo update

          echo "→ Getting latest ${KEEP} versions from Bitnami for apache"
          # newest-first list (desc sort), keep only 15
          bitnami_versions=$(helm search repo bitnami/apache --versions -o json \
            | jq -r '.[].version' \
            | sort -rV \
            | head -n ${KEEP} || true)

          echo "Bitnami latest versions (newest first):"
          echo "$bitnami_versions"

          # fetch Harbor tags once
          echo "→ Fetching existing tags from Harbor"
          harbor_tags=$(oras repo tags "${HARBOR_REPO}/apache" 2>/dev/null || true)
          # normalize (one per line)
          echo "$harbor_tags" | sed '/^\s*$/d' > harbor_tags.txt

          #
          # For each version from Bitnami: push only if missing in Harbor
          #
          echo "→ Checking each Bitnami version against Harbor and pushing missing ones"
          # iterate newest-first so newest pushed first
          while IFS= read -r version; do
            [[ -z "$version" ]] && continue
            if echo "$harbor_tags" | grep -Fxq "$version"; then
              echo "  - $version already in Harbor -> skip"
              continue
            fi

            echo "  - $version missing in Harbor -> pulling & pushing"
            # pull chart archive from Bitnami (creates packaged/apache-<ver>.tgz)
            helm pull bitnami/apache --version "$version" --destination packaged

            chart_file="packaged/apache-$version.tgz"
            if [[ ! -f "$chart_file" ]]; then
              echo "ERROR: expected $chart_file to exist, aborting" >&2
              exit 1
            fi

            # Push using Helm OCI commands (requires helm registry login)
            echo "    • helm push -> ${HARBOR_REPO}/apache:$version"
            helm push "$chart_file" "oci://${HARBOR_REPO}"

            # update local harbor_tags variable to include the new version so we don't re-push in same run
            harbor_tags="$(printf "%s\n%s" "$version" "$harbor_tags")"
          done <<< "$bitnami_versions"

          #
          # Prune Harbor: keep latest KEEP versions and delete the rest
          #
          echo "→ Pruning Harbor, keeping only the latest ${KEEP} versions"

          # list all versions in harbor (newest-first), fall back to empty if none
          all_versions=$(oras repo tags "${HARBOR_REPO}/apache" 2>/dev/null || true)
          # sort newest-first by semver-like order
          all_versions_sorted=$(echo "$all_versions" | sort -rV)

          # compute versions to delete: lines starting at KEEP+1
          to_delete=$(echo "$all_versions_sorted" | sed -n "$((KEEP+1)),\$p" || true)

          if [[ -z "${to_delete//[$'\t\r\n ']}" ]]; then
            echo "No old versions to delete (Harbor has <= ${KEEP} versions)."
          else
            echo "Versions to delete:"
            echo "$to_delete"
            while IFS= read -r oldv; do
              [[ -z "$oldv" ]] && continue
              echo "  • Deleting ${HARBOR_REPO}/apache:$oldv"
              # use oras manifest delete for the reference
              oras manifest delete "${HARBOR_REPO}/apache:$oldv" || true
            done <<< "$to_delete"
          fi

      # Package and push local nginx-multiple chart (kept as-is)
      - name: Package nginx-multiple chart
        run: |
          mkdir -p packaged
          helm package helm/nginx-multiple --destination packaged

      - name: Push nginx-multiple chart to Harbor
        run: |
          set -euo pipefail
          chart_file=$(ls packaged/nginx-multiple-*.tgz | head -n 1)
          if [[ -z "$chart_file" ]]; then
            echo "No packaged nginx-multiple chart found, skipping push."
            exit 0
          fi

          # extract version from packaged file name (nginx-multiple-<version>.tgz)
          version=$(basename "$chart_file" | sed -E 's/^nginx-multiple-(.+)\.tgz$/\1/')
          NGINX_REPO="harbor.portainercloud.io/helm"

          echo "Saving and pushing nginx-multiple:$version to Harbor"
          helm push $chart_file "${NGINX_REPO}"
